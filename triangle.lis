     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Basic Float Operations".  This program demonstrates the input and output of a float number and demonstrates *
     3                                  ;some basic math operations using float numbers.  Copyright (C) 2020 Floyd Holliday.                                        *
     4                                  ;                                                                                                                           *
     5                                  ;This file is part of the software program "Basic Float Operations".                                                        *
     6                                  ;Basic Float Operations is free software: you can redistribute it and/or modify it under the terms of the GNU General Public*
     7                                  ;License version 3 as published by the Free Software Foundation.                                                            *
     8                                  ;Basic Float Operations is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the       *
     9                                  ;implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more      *
    10                                  ;details.  A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                  *
    11                                  ;****************************************************************************************************************************
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    14                                  ;
    15                                  ;Author information
    16                                  ;  Author name: Floyd Holliday
    17                                  ;  Author email: holliday@fullerton.edu
    18                                  ;
    19                                  ;Program information
    20                                  ;  Program name: Basic Float Operations
    21                                  ;  Programming languages: One modules in C++ and one module in X86
    22                                  ;  Date program began: 2014-Aug-25
    23                                  ;  Date of last update: 2014-Sep-29
    24                                  ;  Date comments upgraded: 2020-July-04
    25                                  ;  Date open source license added: 2020-Sep-20
    26                                  ;  Files in this program: fp-io-driver.cpp, fp-io.asm 
    27                                  ;  Status: Finished.
    28                                  ;  References consulted: Seyfarth, Chapter 11
    29                                  ;  Future upgrade possible: software to validate inputs and reject non-float inputs
    30                                  ;
    31                                  ;Purpose
    32                                  ;  This program will demonstrate how to input a single float number, multiply that inputted number by a floating point
    33                                  ;  constant and then output the results.
    34                                  ;  To students enrolled in 240 class: this program includes a secondary purpose, which is to demonstrate how to do a 
    35                                  ;     state component back up using instructions xsave and xrstor.  For the most part that is superflous material. You may
    36                                  ;     safely disregard the two sections on "state component backup".  By the way, you still have to save all the GPRs 
    37                                  ;     and restore them the long way.
    38                                  ;
    39                                  ;This file
    40                                  ;  File name: fp-io.asm
    41                                  ;  Language: X86 with Intel syntax.
    42                                  ;  Max page width: 132 columns
    43                                  ;  Assemble: nasm -f elf64 -l fp-io.lis -o fp-io.o fp-io.asm
    44                                  
    45                                  
    46                                  ;===== Begin code area ========================================================================================================
    47                                  
    48                                  extern fgets
    49                                  
    50                                  extern stdin
    51                                  
    52                                  extern printf                                               ;External C++ function for writing to standard output device
    53                                  
    54                                  extern scanf                                                ;External C++ function for reading from the standard input device
    55                                  
    56                                  global triangle                                    ;This makes floating_point_io callable by functions outside of this file.
    57                                  
    58                                  segment .data                                               ;Place initialized data here
    59 00000000 0000000000003640        place_holder  dq 22.0
    60                                  
    61                                  segment .bss                                                ;Place un-initialized data here.
    62                                  
    63                                  align 64                                                    ;Insure that the inext data declaration starts on a 64-byte boundar.
    64 00000000 <res 00000340>          backuparea resb 832                                         ;Create an array for backup storage having 832 bytes.
    65                                  
    66                                  ;===== Begin executable instructions here =====================================================================================
    67                                  
    68                                  segment .text                                               ;Place executable instructions in this segment.
    69                                  
    70                                  triangle:                                          ;Entry point.  Execution begins here.
    71                                  
    72                                  ;=========== Back up all the GPRs whether used in this program or not =========================================================
    73                                  
    74 00000000 55                      push       rbp                                              ;Save a copy of the stack base pointer
    75 00000001 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
    76 00000004 53                      push       rbx                                              ;Back up rbx
    77 00000005 51                      push       rcx                                              ;Back up rcx
    78 00000006 52                      push       rdx                                              ;Back up rdx
    79 00000007 56                      push       rsi                                              ;Back up rsi
    80 00000008 57                      push       rdi                                              ;Back up rdi
    81 00000009 4150                    push       r8                                               ;Back up r8
    82 0000000B 4151                    push       r9                                               ;Back up r9
    83 0000000D 4152                    push       r10                                              ;Back up r10
    84 0000000F 4153                    push       r11                                              ;Back up r11
    85 00000011 4154                    push       r12                                              ;Back up r12
    86 00000013 4155                    push       r13                                              ;Back up r13
    87 00000015 4156                    push       r14                                              ;Back up r14
    88 00000017 4157                    push       r15                                              ;Back up r15
    89 00000019 9C                      pushf                                                       ;Back up rflags
    90                                  
    91                                  
    92                                  
    93 0000001A F20F100425-             movsd xmm0, [place_holder]
    93 0000001F [00000000]         
    94                                  ;Restore the original values to the GPRs
    95 00000023 9D                      popf                                                        ;Restore rflags
    96 00000024 415F                    pop        r15                                              ;Restore r15
    97 00000026 415E                    pop        r14                                              ;Restore r14
    98 00000028 415D                    pop        r13                                              ;Restore r13
    99 0000002A 415C                    pop        r12                                              ;Restore r12
   100 0000002C 415B                    pop        r11                                              ;Restore r11
   101 0000002E 415A                    pop        r10                                              ;Restore r10
   102 00000030 4159                    pop        r9                                               ;Restore r9
   103 00000032 4158                    pop        r8                                               ;Restore r8
   104 00000034 5F                      pop        rdi                                              ;Restore rdi
   105 00000035 5E                      pop        rsi                                              ;Restore rsi
   106 00000036 5A                      pop        rdx                                              ;Restore rdx
   107 00000037 59                      pop        rcx                                              ;Restore rcx
   108 00000038 5B                      pop        rbx                                              ;Restore rbx
   109 00000039 5D                      pop        rbp                                              ;Restore rbp
   110                                  
   111 0000003A C3                      ret                                                         ;No parameter with this instruction.  This instruction will pop 8 bytes from
   112                                                                                              ;the integer stack, and jump to the address found on the stack.
   113                                  ;========== End of program fp-io.asm ======================================================================================================================================
   114                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
